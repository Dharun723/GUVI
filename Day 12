inheritance 
Single inheritances
public class A {
 public void  employe(){
  System.out.printlm("employe");
}
}
//import ClassA.ClassA();
public class B extends Class A {
public void  admin (){
 System.out.printlm("Admin");
}
 public static void main(String []args ){
  B office= new B();
   office. employee();
}
}
2) mutli level 

 public class A {
 public void  employe(){
  System.out.printlm("employe);
}
}
public class B extends Class A {
public void  admin (){
 System.out.printlm("Admin");
}
public class C extends Class B {
public void  teams(){
 System.out.printlm("teams");
}
 public static void main(String []args ) {
  C office 1= new C();
   office1.teams();
}
}
3)polymorphism
 public class A {
 public void  employe( int a, String Name ){
  System,out.printlm(" employee class a ");
}
}
public class B extends Class A {
  public void  employe (int a){
 System.out.printlm("employee class B");
}
public static void main(String []args ) {
B office = new B ();
office.employe(1,"Dharun");
office.employe(2);
 
5) abstract
public abstract class A {
 public abstract void  employe ( );


public  abstract class B extends A {
public   abstract void  admin ( );
{
System.out.println(" admin");
}
public static void main(String []args )
{
      B office = new B ();
        office.admin ();
}
}
}



6) interface
 public interface class   A {
	 public  void  employe ( ){
	System.out.println("employe");
	}
	 
	public  interface class B implements  A {
	 public   abstract void admin( );

	public static void main(String []args ) {
	B office = new B ();
	office. admin();
	office.employe();
	}
	}
}

7)
Encapsulation
public class Enca {
 public int getA() {
		return a;
	}
	public void setA(int a) {
		this.a = a;
	}
	public int getB() {
		return b;
	}
	public void setB(int b) {
		this.b = b;
	}
int a;
 int b;

public static void name(String args []) {
	Enca obj1=new Enca();
	obj1.setA(10);
	obj1.setB(20);
	System.out.println(obj1.a);
	System.out.println(obj1.b);
}
}



